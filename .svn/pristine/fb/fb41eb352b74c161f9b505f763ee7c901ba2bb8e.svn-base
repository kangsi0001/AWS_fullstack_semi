package com.kseolha.service;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestParam;

import com.kseolha.domain.MemberVO;
import com.kseolha.mapper.MemberMapper;

@Service
public class MemberServiceImpl implements MemberService {
	/*
	 * 04.04
	 * 김민수 
	 * 로그인,회원가입
	 */
	
	@Override
    public List<MemberVO> getList() throws Exception{
        return memberMapper.getList();
    }
	
	
	@Autowired
	private MemberMapper memberMapper;
	// 아이디 조회
	public MemberVO read(String id)throws Exception  {
		return memberMapper.get(id);
	}
	
	@Override
	public MemberVO get(String email) {
		return memberMapper.getEmail(email);
	}

	// 회원가입
	@Override
	public void register(MemberVO vo) throws Exception {
		memberMapper.register(vo);
	}
	
	// 로그인
	@Override
	public MemberVO login(MemberVO vo) throws Exception {
		return memberMapper.selectOne(vo);
	}
	
	// 이메일,아이디 중복검사
	 @Override
	 public int idCheck(String email) throws Exception {
	    return memberMapper.idCheck(email);
	 }
	 @Override
	 public int nickCheck(String id) throws Exception {
		 return memberMapper.nickCheck(id);
	 }

	// 아이디 찾기 
	 public MemberVO selectId(MemberVO vo) throws Exception{
		 return memberMapper.findId(vo);
	 }

	 // 비밀번호 재설정
	@Override
	public void findPw(MemberVO vo) throws Exception {
		 memberMapper.updatePw(vo);
	}
	
	// 회원아이디 검색
	@Override
	public List<MemberVO> searchName(String id) {
		return memberMapper.searchName(id);
	}
	
	// 회원정보 수정
	@Override
	public int modify(MemberVO vo) {
		return memberMapper.memberUpdate(vo);
	}

	@Override
	public void modifyPw(MemberVO vo) {
			BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
			System.out.println("암호화전 : " + vo.getPw());
			
			// 암호화 하여 user객체에 저장
			String securePw = encoder.encode(vo.getPw());
			vo.setPw(securePw);
			
			memberMapper.changePw(vo);
	}

	
	
	 
	
	
}
