package com.kseolha.mapper;

import static org.junit.Assert.*;

import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.kseolha.domain.FriendVO;

import lombok.extern.log4j.Log4j;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
@Log4j
public class FriendMapperTests {
	
	@Autowired
	private FriendMapper friendMapper;
	
	
	
	
	@Test // 4/5 일 테스트 성공
	public void testInsert() {
		FriendVO vo = new FriendVO();
		vo.setFollowing("test1");
		vo.setFollowed("test4");
		friendMapper.insert(vo);
		log.info(vo);
		
	}

	// 4.6 delete -> unfollow 로 대체  (팔로우 ,팔로워)  팔로우가 가지고있는 팔로워 삭제
	@Test  
	public void testUnfollow(){
		FriendVO vo = new FriendVO();
		friendMapper.unfollow("test4", "test1");
		log.info(vo);
	}
	// 4.6 팔로워가 팔로잉을 삭제하는것   통과 
//	@Test
//	public void testUnfollowing(){
//		FriendVO vo = new FriendVO();
//		friendMapper.unfollow("test4", "test1");
//	}

	
	@Test  // 4.6 팔로잉 목록 통과
	public void testGetFollowings() {
	   List<FriendVO> followings = friendMapper.getFollowings("test2");
	    
	        log.info(followings);
	    
	}
	// 4.6 팔로워 목록 통과 a 의 팔로워 하면 a가 가지고있는 팔로워목록나옴
	@Test 
	public void testGetFollowers(){
		List<FriendVO> followers = friendMapper.getFollowers("test2");
	}
	
	@Test  // 4/10일 테스트 통과 
	public void testSelectFriend() {
//		String following = "test1";
//		String followed = "test2";
		
		boolean result = friendMapper.selectFriend("test4", "test2");
	
		log.info(result);
		
		
		
	}

}
