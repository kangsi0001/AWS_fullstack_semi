package com.kseolha.controller;

import java.util.Random;

import javax.mail.internet.MimeMessage;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.kseolha.domain.MemberVO;
import com.kseolha.service.BoardService;
import com.kseolha.service.MemberService;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.extern.log4j.Log4j;

@Controller
@RequestMapping("member/")
//@Data
@AllArgsConstructor
@Log4j
public class MemberController {

	/*
	 * 04.06 ~ 04.07
	 * 김민수
	 * 로그인, 회원가입 컨트롤러 구현
	 * 
	 * 04.10 
	 * 로그아웃 구현, id 중복검사, 이메일 인증번호 전송구현 시작
	 * 
	 * 04.11
	 * 이메일 인증번호 전송 구현완료
	 * 
	 * 04.11 
	 * 자동로그인 구현진행
	 */
	@Autowired
	private MemberService memberservice;
	
	@Autowired
	private JavaMailSender mailSender;

	//회원가입 페이지 이동
	@GetMapping("signup")
	public String signup() {
		return "member/signup";
	}
	// 로그인
	@GetMapping("login")
	public String login(){
		return "member/login";
	}
	
	

	// 로그인 submit
	@RequestMapping(value="login", method=RequestMethod.POST)
	//@PostMapping("login")
	public String loginPOST(HttpServletRequest req, MemberVO vo, RedirectAttributes rttr, HttpServletResponse rsp) throws Exception{
		HttpSession session = req.getSession();
		MemberVO lvo = memberservice.login(vo);

		if(lvo == null) {
			int result = 0;
			rttr.addFlashAttribute("result", result);
			 return "redirect:/member/login";
			// rsp.sendRedirect("login");
		}  
			
			// 자동로그인 쿠키저장 조건식
			if(req.getParameter("auto_login") != null) {
				log.info("자동로그인 진행");
				// 쿠키생성 
				Cookie loginCookie = new Cookie("loginCookie", session.getId());
				loginCookie.setPath("/");
				loginCookie.setMaxAge(60*60*24*7);
				// 쿠키 전송 
				rsp.addCookie(loginCookie);
			}
//			Object destination = session.getAttribute("destination");
//			rsp.sendRedirect(destination != null ? (String) destination : "board/feed");

		 session.setAttribute("member", lvo);
		 return "redirect:/board/feed";
	}
	
	// 회원가입 
	@RequestMapping(value="signup", method=RequestMethod.POST)
	public String joinPOST(MemberVO vo) throws Exception{
//		req.setCharacterEncoding("utf-8");
		// 회원가입 서비스 실행
		memberservice.register(vo);
		log.info(vo);
		return "redirect:/member/login";
		
	}
	
	// 아이디 중복 검사 
    @RequestMapping(value="memberIdChk", method=RequestMethod.POST)
    @ResponseBody
    public String idCheckPost(String email) throws Exception{
    	int result = memberservice.idCheck(email);
    	if(result != 0) {
    		return "fail"; 
    	}else {
    		return "success";
    	}
    }
    
    /* 메인페이지 로그아웃 */
    @RequestMapping(value="logout", method=RequestMethod.GET)
    public String logoutGet(HttpServletRequest request) throws Exception{
    	log.info("로그아웃 메서드 진행");
    	
    	HttpSession session = request.getSession();
    	
    	session.invalidate();
    	
    	return "redirect:/member/login";
    }
    
    /* 이메일 인증 */
    @RequestMapping(value="mailCheck", method=RequestMethod.GET)
    @ResponseBody
    public String mailCheckGET(String email) throws Exception{
        
        /* 뷰(View)로부터 넘어온 데이터 확인 */
        log.info("이메일 데이터 전송 시작");
        log.info("이메일 : " + email);     
        
        // 인증번호 랜덤 
        Random random = new Random();
        int checkNum = random.nextInt(888888) + 111111;
        log.info("랜덤 인증번호 " + checkNum);
        
        /* 이메일 보내기 */
        String setFrom = "damsotest@gmail.com";
        String toMail = email;
        String title = "회원가입 인증 이메일 입니다.";
        String content = "인증번호는" + checkNum + "입니다";
        
        
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "utf-8");
            helper.setFrom(setFrom);
            helper.setTo(toMail);
            helper.setSubject(title);
            helper.setText(content,true);
            mailSender.send(message);
            
        }catch(Exception e) {
            e.printStackTrace();
        }
        String num = Integer.toString(checkNum);
        return num;
    }



}
